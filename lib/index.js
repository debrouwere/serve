// Generated by CoffeeScript 1.8.0
(function() {
  var WebSocketServer, app, connect, exec, fs, handshake, hasMakefile, here, http, livereload, open, program, serveRoot, server, socketApp, socketServer, vendorRoot, watchRoot, _;

  fs = require('fs');

  fs.path = require('path');

  exec = require('child_process').exec;

  http = require('http');

  connect = require('connect');

  open = require('open');

  program = require('commander');

  connect = require('connect');

  WebSocketServer = (require('ws')).Server;

  _ = require('underscore');

  program.version('0.1.0').usage('[directory] [options]').option('-p, --port <n>', 'The port on which to serve [3000]', parseInt, 3000).option('-w, --watch [directory]', 'The directory to watch for changes (defaults to the directory being served)').option('-r, --reload', 'Enable live reloading').option('-i, --inject', 'Inject the live reload script into HTML (obviating the need for a live reloading browser plugin)').option('-e, --exec', 'The command to execute when the watched directory has changed').option('-t, --target', 'The make target to execute when the watched directory has changed [all]', 'all').option('-o, --open', 'Launch a web browser and point it to the served directory').option('-v, --verbose', 'Be more verbose').parse(process.argv);

  here = _.partial(fs.path.join, process.cwd());

  serveRoot = here(program.args[0] || '.');

  watchRoot = here((program.watch === true ? '.' : program.watch || program.args[0]));

  vendorRoot = fs.path.join(__dirname, '../vendor');

  hasMakefile = here('Makefile');

  app = connect();

  if (program.inject) {
    app.use((require('connect-livereload'))());
  }

  app.use((require('serve-index'))(serveRoot));

  app.use((require('serve-static'))(serveRoot));

  socketApp = connect();

  socketApp.use((require('serve-static'))(vendorRoot));

  handshake = {
    command: 'hello',
    serverName: 'serve-cli 0.1.0',
    protocols: ['http://livereload.com/protocols/official-7']
  };

  livereload = function(server) {
    var webSocketServer;
    webSocketServer = new WebSocketServer({
      server: server
    });
    console.log("Live reloader listening on port 35729");
    livereload.sockets = [];
    webSocketServer.on('connection', function(socket) {
      livereload.sockets.push(socket);
      livereload.sockets = _.where(livereload.sockets, {
        readyState: 1
      });
      return socket.on('message', function(body) {
        var message;
        message = JSON.parse(body);
        switch (message.command) {
          case 'hello':
            return socket.send(JSON.stringify(handshake));
          case 'info':
            break;
          default:
            throw new Error("Unrecognized message command: " + message.command);
        }
      });
    });
    return fs.watch(watchRoot, function(event, filename) {
      var command, reload;
      console.log(filename, event);
      reload = function(path) {
        var socket, _i, _len, _ref, _results;
        if (program.verbose) {
          console.log("reloading for " + path);
        }
        _ref = livereload.sockets;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          socket = _ref[_i];
          _results.push(socket.send(JSON.stringify({
            command: 'reload',
            path: path
          })));
        }
        return _results;
      };
      if (program.exec || program.target) {
        command = program.exec || ("make " + program.target);
        return exec(command, function(err, stdout, stderr) {
          console.log(stdout);
          return reload(filename);
        });
      } else {
        return reload(filename);
      }
    });
  };

  if (program.reload) {
    socketServer = http.createServer(socketApp);
    livereload(socketServer);
    socketServer.listen(35729);
  }

  server = http.createServer(app);

  server.listen(program.port, function(err) {
    console.log("File server listening on port " + program.port);
    if (program.open) {
      return open("http://localhost:" + program.port + "/");
    }
  });

}).call(this);
