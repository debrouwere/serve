// Generated by CoffeeScript 1.12.4
(function() {
  var WebSocketServer, _, app, colors, connect, exec, fs, handshake, hasMakefile, here, http, isBroken, livereload, noop, open, program, rebuild, serveRoot, server, socketApp, socketServer, vendorRoot, watchRoot, ws;

  fs = require('fs');

  fs.path = require('path');

  exec = require('child_process').exec;

  http = require('http');

  connect = require('connect');

  open = require('open');

  colors = require('colors');

  program = require('commander');

  connect = require('connect');

  ws = require('ws');

  WebSocketServer = ws.Server;

  _ = require('underscore');

  program.version('0.2.0').usage('[directory] [options]').option('-p, --port <n>', 'The port on which to serve [3000]', parseInt, 3000).option('-w, --watch [directory]', 'The directory to watch for changes (defaults to the directory being served)').option('-r, --reload', 'Enable live reloading').option('-i, --inject', 'Inject the live reload script into HTML (obviating the need for a live reloading browser plugin)').option('-e, --exec', 'The command to execute when the watched directory has changed').option('-t, --target [target]', 'The make target to execute when the watched directory has changed [all]', 'all').option('-o, --open', 'Launch a web browser and point it to the served directory').option('-v, --verbose', 'Be more verbose').parse(process.argv);

  here = _.partial(fs.path.join, process.cwd());

  serveRoot = here(program.args[0] || '.');

  watchRoot = here((program.watch === true ? '.' : program.watch || program.args[0]));

  vendorRoot = fs.path.join(__dirname, '../vendor');

  hasMakefile = here('Makefile');

  if (program.watch && serveRoot === watchRoot) {
    throw new Error('Cannot watch the same directory to which we build');
  }

  app = connect();

  if (program.inject) {
    app.use((require('connect-livereload'))());
  }

  app.use((require('serve-index'))(serveRoot));

  app.use((require('serve-static'))(serveRoot));

  socketApp = connect();

  socketApp.use((require('serve-static'))(vendorRoot));

  handshake = {
    command: 'hello',
    serverName: 'serve-cli 0.2.0',
    protocols: ['http://livereload.com/protocols/official-7']
  };

  noop = function() {};

  isBroken = false;

  rebuild = function(done) {
    var command;
    if (done == null) {
      done = noop;
    }
    command = program.exec || ("make " + program.target);
    return exec(command, function(err, stdout, stderr) {
      var wasBroken;
      wasBroken = isBroken && !stderr;
      if (program.verbose || wasBroken) {
        isBroken = false;
        if (wasBroken) {
          console.info(stdout.green);
        } else {
          console.info(stdout);
        }
      }
      if (stderr) {
        isBroken = true;
        console.error(stderr.red);
      }
      return done(err);
    });
  };

  livereload = function(server) {
    var webSocketServer;
    webSocketServer = new WebSocketServer({
      server: server
    });
    console.log("Live reloader listening on port 35729");
    livereload.clients = [];
    webSocketServer.on('connection', function(client) {
      livereload.clients.push(client);
      return client.on('message', function(body) {
        var message;
        message = JSON.parse(body);
        switch (message.command) {
          case 'hello':
            return client.send(JSON.stringify(handshake));
          case 'info':
            break;
          default:
            throw new Error("Unrecognized message command: " + message.command);
        }
      });
    });
    return fs.watch(watchRoot, function(event, filename) {
      var reload;
      reload = function(path) {
        var client, i, len, message, ref, results;
        if (program.verbose) {
          console.log("reloading for " + path);
        }
        ref = livereload.clients;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          client = ref[i];
          switch (client.readyState) {
            case 0:
              break;
            case 1:
              message = {
                command: 'reload',
                path: path
              };
              results.push(client.send(JSON.stringify(message)));
              break;
            case 2:
            case 3:
              results.push(client.terminate());
              break;
            default:
              results.push(void 0);
          }
        }
        return results;
      };
      if (program.exec || program.target) {
        return rebuild(function() {
          return reload(filename);
        });
      } else {
        return reload(filename);
      }
    });
  };

  if (program.exec || program.target) {
    rebuild();
  }

  if (program.reload) {
    socketServer = http.createServer(socketApp);
    livereload(socketServer);
    socketServer.listen(35729);
  }

  server = http.createServer(app);

  server.listen(program.port, function(err) {
    console.log("File server listening on port " + program.port);
    if (program.open) {
      return open("http://localhost:" + program.port + "/");
    }
  });

}).call(this);
